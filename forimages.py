# -*- coding: utf-8 -*-
"""ForImages.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wXEtRMVukUnkk65BjpSgvJxiGndLkWeB
"""

import tensorflow as tf
from keras import layers
import keras.applications.resnet50
from tensorflow.keras import datasets, layers, models
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input

"""# Convolutional layers"""

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 3), padding = 'same'))
model.add(layers.BatchNormalization())
model.add(layers.MaxPooling2D((3, 3)))
model.add(layers.Conv2D(64, (5, 5), activation='relu', strides=(1, 1), padding ='same'))
model.add(layers.BatchNormalization())
model.add(layers.MaxPooling2D((3, 3)))
model.add(layers.Conv2D(128, (3, 3), activation='relu',strides=(1 ,1), padding = 'same'))

model.summary()

model.add(layers.Reshape((28, 28, 64, 2)))

model.summary()

model.add(layers.Conv3D(64, (3, 3, 3), padding='same', strides=(1, 1,  1)))

model.summary()

"""# Residual Blocks"""

!pip install tensorflow-addons

from tensorflow import Tensor 
from tensorflow.keras.layers import Input, Conv3D, ReLU, Add, AveragePooling3D, Flatten, Dense
from tensorflow.keras.models import Model
import tensorflow_addons as tfa

from tensorflow_addons.layers import GroupNormalization

def relu_bn(inputs: Tensor) -> Tensor:
    relu = ReLU()(inputs)
    bn = GroupNormalization()(relu)
    return bn

def residual_block(x: Tensor, downsample: bool, filters: int, kernel_size: int = 3) -> Tensor:
    y = Conv3D(kernel_size=kernel_size,
               strides= (1 if not downsample else 2),
               filters=filters,
               padding="same")(x)
    y = relu_bn(y)
    y = Conv3D(kernel_size=kernel_size,
               strides=1,
               filters=filters,
               padding="same")(y)
  
    if downsample:
        x = Conv3D(kernel_size=1,
                   strides=2,
                   filters=filters,
                   padding="same")(x)
    out = Add()([x, y])
    out = relu_bn(out)
    return out

def create_res_net():
    
    inputs = Input(shape=(28, 28, 64, 64))
    
    t = GroupNormalization()(inputs)
    t = Conv3D(kernel_size=3,
               strides=1,
               filters=64,
               padding="same")(t)
    t = relu_bn(t)
    
    num_blocks_list = [1]
    for i in range(len(num_blocks_list)):
        num_blocks = num_blocks_list[i]
        for j in range(num_blocks):
            t = residual_block(t, downsample=(j==0 and i!=0), filters=64)
    
    t = AveragePooling3D(4)(t)
    outputs = t
    model = Model(inputs, outputs)

    model.compile(
        optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy']
    )

    return model

model_1 = create_res_net()

model_1.summary()

tf.keras.utils.plot_model(model_1, "convet.png", show_shapes=True)